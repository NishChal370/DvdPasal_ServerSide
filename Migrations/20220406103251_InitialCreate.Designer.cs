// <auto-generated />
using System;
using DvD_Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DvD_Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220406103251_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CastMember", b =>
                {
                    b.Property<int>("Dvdnumber")
                        .HasColumnType("int")
                        .HasColumnName("DVDNumber");

                    b.Property<int>("ActorNumber")
                        .HasColumnType("int");

                    b.HasKey("Dvdnumber", "ActorNumber")
                        .HasName("CastMember_PK");

                    b.HasIndex("ActorNumber");

                    b.ToTable("CastMember", (string)null);
                });

            modelBuilder.Entity("DvD_Api.Models.Actor", b =>
                {
                    b.Property<int>("ActorNumber")
                        .HasColumnType("int");

                    b.Property<string>("ActorLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ActorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ActorNumber")
                        .HasName("Actor_PK");

                    b.ToTable("Actor", (string)null);
                });

            modelBuilder.Entity("DvD_Api.Models.Dvdcategory", b =>
                {
                    b.Property<int>("CategoryNumber")
                        .HasColumnType("int");

                    b.Property<bool>("AgeRestricted")
                        .HasColumnType("bit");

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.HasKey("CategoryNumber")
                        .HasName("DVDCategory_PK");

                    b.ToTable("DVDCategory", (string)null);
                });

            modelBuilder.Entity("DvD_Api.Models.Dvdcopy", b =>
                {
                    b.Property<int>("CopyNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatePurchased")
                        .HasColumnType("date");

                    b.Property<int>("Dvdnumber")
                        .HasColumnType("int")
                        .HasColumnName("DVDNumber");

                    b.HasKey("CopyNumber")
                        .HasName("DVDCopy_PK");

                    b.HasIndex("Dvdnumber");

                    b.ToTable("DVDCopy", (string)null);
                });

            modelBuilder.Entity("DvD_Api.Models.Dvdtitle", b =>
                {
                    b.Property<int>("Dvdnumber")
                        .HasColumnType("int")
                        .HasColumnName("DVDNumber");

                    b.Property<int>("CategoryNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateReleased")
                        .HasColumnType("date");

                    b.Property<decimal?>("PenaltyCharge")
                        .HasColumnType("decimal(28,0)");

                    b.Property<int>("ProducerNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("StandardCharge")
                        .HasColumnType("decimal(28,0)");

                    b.Property<int>("StudioNumber")
                        .HasColumnType("int");

                    b.HasKey("Dvdnumber")
                        .HasName("DVDTitle_PK");

                    b.HasIndex("CategoryNumber");

                    b.HasIndex("ProducerNumber");

                    b.HasIndex("StudioNumber");

                    b.ToTable("DVDTitle", (string)null);
                });

            modelBuilder.Entity("DvD_Api.Models.Loan", b =>
                {
                    b.Property<int>("LoanNumber")
                        .HasColumnType("int");

                    b.Property<int>("CopyNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateDue")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateOut")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateReturned")
                        .HasColumnType("date");

                    b.Property<int>("MemberNumber")
                        .HasColumnType("int");

                    b.Property<int>("TypeNumber")
                        .HasColumnType("int");

                    b.HasKey("LoanNumber")
                        .HasName("Loan_PK");

                    b.HasIndex("CopyNumber");

                    b.HasIndex("MemberNumber");

                    b.HasIndex("TypeNumber");

                    b.ToTable("Loan", (string)null);
                });

            modelBuilder.Entity("DvD_Api.Models.LoanType", b =>
                {
                    b.Property<int>("LoanTypeNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("LoanType1")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("LoanType");

                    b.HasKey("LoanTypeNumber")
                        .HasName("LoanType_PK");

                    b.ToTable("LoanType", (string)null);
                });

            modelBuilder.Entity("DvD_Api.Models.Member", b =>
                {
                    b.Property<int>("MemberNumber")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int>("CategoryNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("MemberNumber")
                        .HasName("Member_PK");

                    b.HasIndex("CategoryNumber");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("DvD_Api.Models.MembershipCategory", b =>
                {
                    b.Property<int>("McategoryNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<int>("TotalLoans")
                        .HasColumnType("int");

                    b.HasKey("McategoryNumber")
                        .HasName("MembershipCategory_PK");

                    b.ToTable("MembershipCategory", (string)null);
                });

            modelBuilder.Entity("DvD_Api.Models.Producer", b =>
                {
                    b.Property<int>("ProducerNumber")
                        .HasColumnType("int");

                    b.Property<string>("ProducerName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)");

                    b.HasKey("ProducerNumber")
                        .HasName("Producer_PK");

                    b.ToTable("Producer", (string)null);
                });

            modelBuilder.Entity("DvD_Api.Models.Studio", b =>
                {
                    b.Property<int>("StudioNumber")
                        .HasColumnType("int");

                    b.Property<string>("StudioName")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.HasKey("StudioNumber")
                        .HasName("Studio_PK");

                    b.ToTable("Studio", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CastMember", b =>
                {
                    b.HasOne("DvD_Api.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorNumber")
                        .IsRequired()
                        .HasConstraintName("Actor_FK");

                    b.HasOne("DvD_Api.Models.Dvdtitle", null)
                        .WithMany()
                        .HasForeignKey("Dvdnumber")
                        .IsRequired()
                        .HasConstraintName("DVDTitle_FK");
                });

            modelBuilder.Entity("DvD_Api.Models.Dvdcopy", b =>
                {
                    b.HasOne("DvD_Api.Models.Dvdtitle", "DvdnumberNavigation")
                        .WithMany("Dvdcopies")
                        .HasForeignKey("Dvdnumber")
                        .IsRequired()
                        .HasConstraintName("DVDTitle_FKv2");

                    b.Navigation("DvdnumberNavigation");
                });

            modelBuilder.Entity("DvD_Api.Models.Dvdtitle", b =>
                {
                    b.HasOne("DvD_Api.Models.Dvdcategory", "CategoryNumberNavigation")
                        .WithMany("Dvdtitles")
                        .HasForeignKey("CategoryNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("DVDCategory_FK");

                    b.HasOne("DvD_Api.Models.Producer", "ProducerNumberNavigation")
                        .WithMany("Dvdtitles")
                        .HasForeignKey("ProducerNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Producer_FK");

                    b.HasOne("DvD_Api.Models.Studio", "StudioNumberNavigation")
                        .WithMany("Dvdtitles")
                        .HasForeignKey("StudioNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Studio_FK");

                    b.Navigation("CategoryNumberNavigation");

                    b.Navigation("ProducerNumberNavigation");

                    b.Navigation("StudioNumberNavigation");
                });

            modelBuilder.Entity("DvD_Api.Models.Loan", b =>
                {
                    b.HasOne("DvD_Api.Models.Dvdcopy", "CopyNumberNavigation")
                        .WithMany("Loans")
                        .HasForeignKey("CopyNumber")
                        .IsRequired()
                        .HasConstraintName("DVDCopy_FK");

                    b.HasOne("DvD_Api.Models.Member", "MemberNumberNavigation")
                        .WithMany("Loans")
                        .HasForeignKey("MemberNumber")
                        .IsRequired()
                        .HasConstraintName("Member_FK");

                    b.HasOne("DvD_Api.Models.LoanType", "TypeNumberNavigation")
                        .WithMany("Loans")
                        .HasForeignKey("TypeNumber")
                        .IsRequired()
                        .HasConstraintName("LoanType_FK");

                    b.Navigation("CopyNumberNavigation");

                    b.Navigation("MemberNumberNavigation");

                    b.Navigation("TypeNumberNavigation");
                });

            modelBuilder.Entity("DvD_Api.Models.Member", b =>
                {
                    b.HasOne("DvD_Api.Models.MembershipCategory", "CategoryNumberNavigation")
                        .WithMany("Members")
                        .HasForeignKey("CategoryNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("MembershipCategory_FK");

                    b.Navigation("CategoryNumberNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DvD_Api.Models.Dvdcategory", b =>
                {
                    b.Navigation("Dvdtitles");
                });

            modelBuilder.Entity("DvD_Api.Models.Dvdcopy", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("DvD_Api.Models.Dvdtitle", b =>
                {
                    b.Navigation("Dvdcopies");
                });

            modelBuilder.Entity("DvD_Api.Models.LoanType", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("DvD_Api.Models.Member", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("DvD_Api.Models.MembershipCategory", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("DvD_Api.Models.Producer", b =>
                {
                    b.Navigation("Dvdtitles");
                });

            modelBuilder.Entity("DvD_Api.Models.Studio", b =>
                {
                    b.Navigation("Dvdtitles");
                });
#pragma warning restore 612, 618
        }
    }
}
